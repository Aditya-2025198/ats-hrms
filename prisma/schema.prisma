generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id         String        @id @default(cuid())
  name       String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  logs       ActivityLog[]
  candidates Candidate[]   @relation("CompanyCandidates")
  employees  Employee[]
  jobs       Job[]
  users      User[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authId    String   @unique
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Job {
  id               String      @id @default(cuid())
  title            String
  code             String      @unique
  department       String
  description      String?
  vacancy          Int
  status           String
  initiatedBy      String?
  jdUrl            String?
  supportingDocUrl String?
  companyId        String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  candidates       Candidate[] @relation("JobCandidates")
  company          Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Candidate {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String
  position    String?
  status      String
  resumeUrl   String?
  initiatedBy String?
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jobId       String?
  department  String
  company     Company  @relation("CompanyCandidates", fields: [companyId], references: [id], onDelete: Cascade)
  job         Job?     @relation("JobCandidates", fields: [jobId], references: [id], onDelete: Cascade)
}

model Employee {
  id               String    @id @default(cuid())
  employeeCode     String    @unique
  name             String
  email            String
  phone            String
  department       String
  designation      String
  status           String
  dateOfJoining    DateTime
  personalEmail    String?
  grade            String?
  pan              String?
  aadhaar          String?
  address          String?
  altContact       String?
  uan              String?
  fatherName       String?
  education        String?
  modeOfSeparation String?
  lastWorkingDay   DateTime?
  companyId        String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  company          Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id          String   @id @default(cuid())
  action      String
  performedBy String
  companyId   String
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}
