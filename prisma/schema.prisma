generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id         String        @id @default(cuid())
  name       String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  users      User[]
  jobs       Job[]
  candidates Candidate[]   @relation("CompanyCandidates")
  employees  Employee[]
  logs       ActivityLog[]
}

model User {
  id        String   @id @default(cuid())
  authId    String   @unique // Supabase Auth user.id
  email     String   @unique
  name      String
  role      String // Admin, HR, Recruiter
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id               String      @id @default(cuid())
  title            String
  code             String      @unique
  department       String
  description      String?
  vacancy          Int
  status           String // Open, Closed, Hold
  initiatedBy      String?
  jdUrl            String? // Job Description file
  supportingDocUrl String? // Supporting document file
  companyId        String
  company          Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  candidates       Candidate[] @relation("JobCandidates")
}

model Candidate {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String
  position    String?
  status      String
  resumeUrl   String?
  initiatedBy String?
  department  String
  companyId   String
  jobId       String?
  company     Company  @relation("CompanyCandidates", fields: [companyId], references: [id], onDelete: Cascade)
  job         Job?     @relation("JobCandidates", fields: [jobId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Employee {
  id               String    @id @default(cuid())
  employeeCode     String    @unique
  name             String
  email            String
  phone            String
  department       String
  designation      String
  status           String
  dateOfJoining    DateTime
  personalEmail    String?
  grade            String?
  pan              String?
  aadhaar          String?
  address          String?
  altContact       String?
  uan              String?
  fatherName       String?
  education        String?
  modeOfSeparation String?
  lastWorkingDay   DateTime?
  companyId        String
  company          Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model ActivityLog {
  id          String   @id @default(cuid())
  action      String
  performedBy String
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}
